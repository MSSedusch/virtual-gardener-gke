#!/bin/bash -e

BIN="$(dirname "${BASH_SOURCE[0]}")"
if [[ "$BIN" != /* ]]; then
    BIN="$PWD/$BIN"
fi
ROOT="$(dirname "$(dirname "${BIN}")")"
CURRENT="$(dirname "$0")"
if [[ "$CURRENT" != /* ]]; then
    CURRENT="$PWD/$CURRENT"
fi

mkdir -p "$ROOT/gen" "$ROOT/state"

fail() {
    echo "Error: $@">&2
    exit 1
}

info () {
    echo "$@"
}

debug() {
    true
}

git_checkout() {
    info "Cloning $2 repo ..."

    repo="$GEN/$1/repo"
    mkdir -p "$(dirname "$repo")"
    return
    if [ ! -d "$repo" ]; then
        git clone --depth 1 --no-checkout --filter=blob:none "$3" "$repo"
    fi
    (
        cd "$repo"
        git fetch --depth 1 origin refs/tags/$4:refs/tags/$4
        git checkout $4 "${@:5}"
    )
}

generate_password() {
    cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w "${1:-32}" | head -n 1
}

generate_bcrypt_hash() {
    htpasswd -bnBC 10 "" "$1" | tr -d ':\n' | sed 's/$2y/$2a/'
}

kubectl_virtual() {
    kubectl --kubeconfig "$STATE/virtualapiserver/kubeconfig.yaml" "$@"
}

getjsonconfig() {
    cat $ROOT/setup.yaml | yaml2json | jq 'if .'$1' then .'$1' else "'$2'" end'
}

getconfig() {
    cat $ROOT/setup.yaml | yaml2json | jq -r 'if .'$1' then .'$1' else "'$2'" end'
}

lookuppod() {
    # Doesn't work with out of the box jq on CoreOS
    ext=
    if [ "$1" == -d ]; then
        shift
        ext="-[a-z0-9]{10}"
    fi
    kubectl -n $1 get pods | (egrep "$2$ext-[a-z0-9]{5} " || true) | (grep Running || true)
}

checkpod() {
    name="$2"
    if [ $1 == "-d" ]; then
        name="$3"
    fi
    pods="$(lookuppod "$@")"
    if [ -n "$pods" ]; then
        echo "found $name"
        echo "$pods"
    else
        missing=x
        echo "no $name found"
    fi
}

assurepods() {
    $1
    if [ -n "$missing" ]; then
        $2
    echo "waiting for pods"
    while [ -n "$missing" ]; do
        sleep 10
        missing=
        $1
    done
    fi
}

setjsonvalue() {
    local value="$(echo "$3" | sed -e 's/\\/\\\\/g' -e 's/"/\\"/g')"
    local v="$(eval echo \"\$"$1"\" | jq '.'$2'="'"$value"'"')"
    eval $1=\'"$v"\'
}

setjsonjson() {
    local v="$(eval echo \"\$"$1"\" | jq -s '.[0].'"$2"'=.[1] | .[0]' - <( echo "$3"))"
    eval $1=\'"$v"\'
}

helminit() {
    kubectl apply -f $SRC/util/helmrbac.yaml
    helm init --service-account=tiller
}

KUBECONFIG=$(getconfig kubeconfig)

if [[ "$KUBECONFIG" != /* ]]; then
    KUBECONFIG="$ROOT/$KUBECONFIG"
fi

export STATE="$ROOT/state"
export SRC="$ROOT/src"
export NAME="garden"
export NAMESPACE=$NAME
export KUBECONFIG
export GEN="$ROOT/gen"
export DOMAIN="$(getconfig dns.domain)"

assurepods "checkpod -d kube-system tiller-deploy" "helminit"