#!/bin/bash -e

source "$(dirname "$(dirname "$0")")/bin/env"

info "Cloning Gardener repo ..."

repo="$GEN/gardener/repo"
mkdir -p "$(dirname "$repo")"
chart_path="charts/gardener"

generate_kubeconfig() {
username="$1"
usertoken="$2"
cluster_ca_path="$3"
cluster_server="$4"

cat <<EOF
---
apiVersion: v1
kind: Config
current-context: cluster
contexts:
- context:
    cluster: cluster
    user: $username
  name: cluster
clusters:
- cluster:
    certificate-authority-data: $(cat "$cluster_ca_path" | base64 | tr -d '\n')
    server: $cluster_server
  name: cluster
users:
- name: $username
  user:
    token: $usertoken
EOF
}

if [ ! -d "$repo" ]; then
    git clone --depth 1 --no-checkout --filter=blob:none "https://github.com/gardener/gardener.git" "$repo"
else
(
    cd "$repo"
    git fetch --depth 1 origin refs/tags/0.16.0:refs/tags/0.16.0
)
fi

(
    cd "$repo"
    git checkout tags/0.16.0 charts/gardener charts/utils-templates
)

path_tls="$CURRENT"/tls
ca_name="gardener-ca"
mkdir -p "$STATE"/gardener/tls
if [[ ! -f "$STATE/gardener/tls/$ca_name.pem" ]]; then
    cfssl gencert \
        -initca "$path_tls/$ca_name-csr.json" | cfssljson -bare "$STATE/gardener/tls/$ca_name" -
fi

# generate Gardener TLS certificate if not yet done
cert_names="gardener-apiserver gardener-controller-manager"
for cert_name in $cert_names; do
   if [[ ! -f "$STATE/gardener/tls/$cert_name-tls.pem" ]]; then
      cfssl gencert \
        -profile=server \
        -ca="$STATE/gardener/tls/$ca_name.pem" \
        -ca-key="$STATE/gardener/tls/$ca_name-key.pem" \
        -config="$path_tls/ca-config.json" \
        "$path_tls/$cert_name-config.json" | cfssljson -bare "$STATE/gardener/tls/$cert_name-tls"
    fi
done

template="$(cat "$CURRENT/template.json")"
path_tls_out="$STATE/gardener/tls"
etcd_tls_out="$STATE/etcd/tls"

setjsonvalue template "global.apiserver.caBundle" "$(cat "$path_tls_out/$ca_name.pem")"
setjsonvalue template "global.apiserver.tls.crt" "$(cat "$path_tls_out/gardener-apiserver-tls.pem")"
setjsonvalue template "global.apiserver.tls.key" "$(cat "$path_tls_out/gardener-apiserver-tls-key.pem")"

setjsonvalue template "global.controller.config.server.https.tls.caBundle" "$(cat "$path_tls_out/$ca_name.pem")"
setjsonvalue template "global.controller.config.server.https.tls.crt" "$(cat "$path_tls_out/gardener-controller-manager-tls.pem")"
setjsonvalue template "global.controller.config.server.https.tls.key" "$(cat "$path_tls_out/gardener-controller-manager-tls-key.pem")"

setjsonvalue template "global.apiserver.etcd.caBundle" "$(cat "$etcd_tls_out/etcd-ca.pem")"
setjsonvalue template "global.apiserver.etcd.tls.crt" "$(cat "$etcd_tls_out/etcd-client-tls.pem")"
setjsonvalue template "global.apiserver.etcd.tls.key" "$(cat "$etcd_tls_out/etcd-client-tls-key.pem")"

domain="$(getconfig dns.domain)"
dnsprovider="$(getconfig dns.type)"
dnscreds="$(getjsonconfig dns.credentials)"
hostedzone="$(getconfig dns.hostedZoneID)"

setjsonjson template "global.controller.defaultDomains[0].credentials" "$dnscreds"
setjsonvalue template "global.controller.defaultDomains[0].domain" "shoot.$domain"
setjsonvalue template "global.controller.defaultDomains[0].provider" "$dnsprovider"
setjsonvalue template "global.controller.defaultDomains[0].hostedZoneID" "$hostedzone"

setjsonjson template "global.controller.internalDomain.credentials" "$dnscreds"
setjsonvalue template "global.controller.internalDomain.domain" "internal.$domain"
setjsonvalue template "global.controller.internalDomain.provider" "$dnsprovider"
setjsonvalue template "global.controller.internalDomain.hostedZoneID" "$hostedzone"
setjsonvalue template "global.deployment.virtualGarden.clusterIP" "$(getconfig garden.clusterip)"

echo "$template" > "$GEN/gardener/values.json"

# Deploy into virtual cluster
helm template \
    --values "$GEN/gardener/values.json" \
    --namespace "$NAME" \
    --name gardener \
    "$repo/$chart_path/charts/application" \
    > "$GEN/gardener/application.yaml"

kubectl_virtual create ns garden || true
kubectl_virtual apply -f "$GEN/gardener/application.yaml"

info "Generating kubeconfigs for Gardener..."
apiserver_kubeconfig_path="$STATE/gardener/garden-kubeconfig-apiserver.yaml"
controller_kubeconfig_path="$STATE/gardener/garden-kubeconfig-controller.yaml"
apiserver_token="$(kubectl_virtual -n garden get secret $(kubectl_virtual -n garden get sa gardener-apiserver -o jsonpath={.secrets[0].name}) -o jsonpath={.data.token} | base64 -d)"
controller_token="$(kubectl_virtual -n garden get secret $(kubectl_virtual -n garden get sa gardener-controller-manager -o jsonpath={.secrets[0].name}) -o jsonpath={.data.token} | base64 -d)"
cluster_endpoint="https://$(kubectl -n garden get svc -l app=virtual-garden,component=kube-apiserver -o jsonpath="{.items[0].metadata.name}:{.items[0].spec.ports[0].port}")"
generate_kubeconfig "gardener-apiserver" "$apiserver_token" "$STATE/virtualapiserver/tls/kube-apiserver-ca.pem" "$cluster_endpoint" > "$apiserver_kubeconfig_path"
generate_kubeconfig "gardener-controller-manager" "$controller_token" "$STATE/virtualapiserver/tls/kube-apiserver-ca.pem" "$cluster_endpoint" > "$controller_kubeconfig_path"

# Deploy into GKE cluster
helm upgrade \
    --install \
    --force \
    --wait \
    --values "$GEN/gardener/values.json" \
    --set global.apiserver.kubeconfig="$(cat $apiserver_kubeconfig_path)" \
    --set global.controller.kubeconfig="$(cat $controller_kubeconfig_path)" \
    --namespace "$NAME" \
    gardener \
    "$repo/$chart_path/charts/runtime"

